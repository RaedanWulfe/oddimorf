% -----------------------------------------------------------------------------
% Load reader memory map file for incoming data
function [ ...
    control_mm, ...
    incoming_mm_header, incoming_mm_data, ...
    cluttermap_mm_header, cluttermap_mm_data, ...
    plots_mm_header, plots_mm_data] = apply_structure()
    control_mm = ...
        memmapfile('_Control.dat', ...
        'Format', {...
            'int32' double([1 1]) 'is_terminated'; ...
            'int32' double([1 1]) 'header_size'; ...
            'uint64' double([1 1]) 'timestamp'; ...
            'int32' double([1 1]) 'plot_threshold'; ...
            }, ...
        'Repeat', 1, ...
        'Writable', false);
    % -------------------------------------------------------------------------
    % Load reader memory map file for incoming data
    incoming_mm_header = ...
        memmapfile('_Raw.dat', ...
        'Format', {...
            'int64' double([1 1]) 'max_size_bytes'; ...
            'int64' double([1 1]) 'element_size_bytes'; ...
            'int64' double([1 1]) 'write_head'; ...
            'uint64' double([1 1]) 'start_time'; ...
            'single' double([1 2]) 'sensor_origin'; ...
            'uint64' double([1 1]) 'rotation_time_msec'; ...
            }, ...
        'Repeat', 1, ...
        'Writable', false);
    % -------------------------------------------------------------------------
    incoming_end_index = int64(incoming_mm_header.Data(1).max_size_bytes / incoming_mm_header.Data(1).element_size_bytes);
    incoming_mm_data = ...
        memmapfile('_Raw.dat', ...
        'Format', {...
            'uint64' double([1 1]) 'timestamp'; ...
            'single' double([1 1]) 'range'; ...
            'single' double([1 1]) 'azimuth'; ...
            'single' double([1 1]) 'speed'; ...
            'single' double([1 1]) 'intensity'; ...
            }, ...
        'Offset', control_mm.Data(1).header_size, ...
        'Repeat', incoming_end_index, ...
        'Writable', false);
    % -------------------------------------------------------------------------
    % Load writer memory map file for outgoing clutter data
    cluttermap_mm_header = ...
        memmapfile('_ClutterMap.dat', ...
        'Format', {...
            'int64' double([1 1]) 'max_size_bytes'; ...
            'int64' double([1 1]) 'element_size_bytes'; ...
            'int64' double([1 1]) 'write_head'; ...
            'uint64' double([1 1]) 'start_time'; ...
            'single' double([1 2]) 'sensor_origin'; ...
            'uint64' double([1 1]) 'rotation_time_msec'; ...
            }, ...
        'Repeat', 1, ...
        'Writable', true);
    % -------------------------------------------------------------------------
    cluttermap_end_index = int64(cluttermap_mm_header.Data(1).max_size_bytes / cluttermap_mm_header.Data(1).element_size_bytes);
    cluttermap_mm_data = ...
        memmapfile('_ClutterMap.dat', ...
        'Format', {...
            'single' double([1 cluttermap_end_index]) 'latitude'; ...
            'single' double([1 cluttermap_end_index]) 'longitude'; ...
            'uint32' double([1 cluttermap_end_index]) 'intensity'; ...
            }, ...
        'Offset', control_mm.Data(1).header_size, ...
        'Repeat', 1, ...
        'Writable', true);
    % -------------------------------------------------------------------------
    % Load writer memory map file for outgoing tracks data
    plots_mm_header = ...
        memmapfile('_Plots.dat', ...
        'Format', {...
            'int64' double([1 1]) 'max_size_bytes'; ...
            'int64' double([1 1]) 'element_size_bytes'; ...
            'int64' double([1 1]) 'write_head'; ...
            'uint64' double([1 1]) 'start_time'; ...
            'single' double([1 2]) 'sensor_origin'; ...
            'uint64' double([1 1]) 'rotation_time_msec'; ...
            }, ...
        'Repeat', 1, ...
        'Writable', true);
    % -------------------------------------------------------------------------
    plots_end_index = int64(plots_mm_header.Data(1).max_size_bytes / plots_mm_header.Data(1).element_size_bytes);
    plots_mm_data = ...
        memmapfile('_Plots.dat', ...
        'Format', {...
            'uint64' double([1 plots_end_index]) 'timestamp'; ...
            'single' double([1 plots_end_index]) 'latitude'; ...
            'single' double([1 plots_end_index]) 'longitude'; ...
            'single' double([1 plots_end_index]) 'range'; ...
            'single' double([1 plots_end_index]) 'azimuth'; ...
            'single' double([1 plots_end_index]) 'speed'; ...
            'int32' double([1 plots_end_index]) 'type'; ...
            }, ...
        'Offset', control_mm.Data(1).header_size, ...
        'Repeat', 1, ...
        'Writable', true);
    % -------------------------------------------------------------------------
end
